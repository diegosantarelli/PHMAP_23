function [featureTable,outputTable] = featureGenerationT1(inputData)
%DIAGNOSTICFEATURES recreates results in Diagnostic Feature Designer.
%
% Input:
%  inputData: A table or a cell array of tables/matrices containing the
%  data as those imported into the app.
%
% Output:
%  featureTable: A table containing all features and condition variables.
%  outputTable: A table containing the computation results.
%
% This function computes features:
%  Case_sigstats/CrestFactor
%  Case_sigstats/SINAD
%  Case_sigstats/SNR
%  Case_sigstats/Skewness
%  Case_sigstats_1/SINAD
%  Case_sigstats_1/SNR
%  Case_sigstats_1/ShapeFactor
%  Case_sigstats_1/Std
%  Case_sigstats_2/SINAD
%  Case_sigstats_2/Skewness
%  Case_sigstats_3/SINAD
%  Case_sigstats_4/SINAD
%  Case_sigstats_4/SNR
%  Case_sigstats_4/ShapeFactor
%  Case_sigstats_4/Std
%  Case_sigstats_5/SINAD
%  Case_sigstats_5/ShapeFactor
%  Case_sigstats_6/SINAD
%  Case_sigstats_6/ShapeFactor
%  Case_sigstats_6/Std
%
% Frame Policy:
%  Frame name: FRM_1
%  Frame size: 0.128 seconds
%  Frame rate: 0.128 seconds
%
% Organization of the function:
% 1. Compute signals/spectra/features
% 2. Extract computed features into a table
%
% Modify the function to add or remove data processing, feature generation
% or ranking operations.

% Auto-generated by MATLAB on 10-Feb-2025 17:26:19

% Create output ensemble.
outputEnsemble = workspaceEnsemble(inputData,'DataVariables',"Case",'ConditionVariables',"Task1");

% Reset the ensemble to read from the beginning of the ensemble.
reset(outputEnsemble);

% Append new frame policy name to DataVariables.
outputEnsemble.DataVariables = [outputEnsemble.DataVariables;"FRM_1"];

% Set SelectedVariables to select variables to read from the ensemble.
outputEnsemble.SelectedVariables = "Case";

% Initialize a cell array to store all the results.
allMembersResult = {};

% Loop through all ensemble members to read and write data.
while hasdata(outputEnsemble)
    % Read one member.
    member = read(outputEnsemble);

    % Read signals.
    Case_full = readMemberData(member,"Case",["TIME","P3","P1","P2","P4","P5","P6","P7"]);

    % Get the frame intervals.
    lowerBound = Case_full.TIME(1);
    upperBound = Case_full.TIME(end);
    fullIntervals = frameintervals([lowerBound upperBound],0.128,0.128,'FrameUnit',"seconds");
    intervals = fullIntervals;

    % Initialize a table to store frame results.
    frames = table;

    % Loop through all frame intervals and compute results.
    for ct = 1:height(intervals)
        % Get all input variables.
        Case = Case_full(Case_full.TIME>=intervals{ct,1}&Case_full.TIME<intervals{ct,2},:);

        % Initialize a table to store results for one frame interval.
        frame = intervals(ct,:);

        %% SignalFeatures
        try
            % Compute signal features.
            inputSignal = Case.P3;
            CrestFactor = peak2rms(inputSignal);
            SINAD = sinad(inputSignal);
            SNR = snr(inputSignal);
            Skewness = skewness(inputSignal);

            % Concatenate signal features.
            featureValues = [CrestFactor,SINAD,SNR,Skewness];

            % Store computed features in a table.
            featureNames = {'CrestFactor','SINAD','SNR','Skewness'};
            Case_sigstats = array2table(featureValues,'VariableNames',featureNames);
        catch
            % Store computed features in a table.
            featureValues = NaN(1,4);
            featureNames = {'CrestFactor','SINAD','SNR','Skewness'};
            Case_sigstats = array2table(featureValues,'VariableNames',featureNames);
        end

        % Append computed results to the frame table.
        frame = [frame, ...
            table({Case_sigstats},'VariableNames',{'Case_sigstats'})];

        %% SignalFeatures
        try
            % Compute signal features.
            inputSignal = Case.P1;
            SINAD = sinad(inputSignal);
            SNR = snr(inputSignal);
            ShapeFactor = rms(inputSignal,'omitnan')/mean(abs(inputSignal),'omitnan');
            Std = std(inputSignal,'omitnan');

            % Concatenate signal features.
            featureValues = [SINAD,SNR,ShapeFactor,Std];

            % Store computed features in a table.
            featureNames = {'SINAD','SNR','ShapeFactor','Std'};
            Case_sigstats_1 = array2table(featureValues,'VariableNames',featureNames);
        catch
            % Store computed features in a table.
            featureValues = NaN(1,4);
            featureNames = {'SINAD','SNR','ShapeFactor','Std'};
            Case_sigstats_1 = array2table(featureValues,'VariableNames',featureNames);
        end

        % Append computed results to the frame table.
        frame = [frame, ...
            table({Case_sigstats_1},'VariableNames',{'Case_sigstats_1'})];

        %% SignalFeatures
        try
            % Compute signal features.
            inputSignal = Case.P2;
            SINAD = sinad(inputSignal);
            Skewness = skewness(inputSignal);

            % Concatenate signal features.
            featureValues = [SINAD,Skewness];

            % Store computed features in a table.
            featureNames = {'SINAD','Skewness'};
            Case_sigstats_2 = array2table(featureValues,'VariableNames',featureNames);
        catch
            % Store computed features in a table.
            featureValues = NaN(1,2);
            featureNames = {'SINAD','Skewness'};
            Case_sigstats_2 = array2table(featureValues,'VariableNames',featureNames);
        end

        % Append computed results to the frame table.
        frame = [frame, ...
            table({Case_sigstats_2},'VariableNames',{'Case_sigstats_2'})];

        %% SignalFeatures
        try
            % Compute signal features.
            inputSignal = Case.P4;
            SINAD = sinad(inputSignal);

            % Concatenate signal features.
            featureValues = SINAD;

            % Store computed features in a table.
            featureNames = {'SINAD'};
            Case_sigstats_3 = array2table(featureValues,'VariableNames',featureNames);
        catch
            % Store computed features in a table.
            featureValues = NaN(1,1);
            featureNames = {'SINAD'};
            Case_sigstats_3 = array2table(featureValues,'VariableNames',featureNames);
        end

        % Append computed results to the frame table.
        frame = [frame, ...
            table({Case_sigstats_3},'VariableNames',{'Case_sigstats_3'})];

        %% SignalFeatures
        try
            % Compute signal features.
            inputSignal = Case.P5;
            SINAD = sinad(inputSignal);
            SNR = snr(inputSignal);
            ShapeFactor = rms(inputSignal,'omitnan')/mean(abs(inputSignal),'omitnan');
            Std = std(inputSignal,'omitnan');

            % Concatenate signal features.
            featureValues = [SINAD,SNR,ShapeFactor,Std];

            % Store computed features in a table.
            featureNames = {'SINAD','SNR','ShapeFactor','Std'};
            Case_sigstats_4 = array2table(featureValues,'VariableNames',featureNames);
        catch
            % Store computed features in a table.
            featureValues = NaN(1,4);
            featureNames = {'SINAD','SNR','ShapeFactor','Std'};
            Case_sigstats_4 = array2table(featureValues,'VariableNames',featureNames);
        end

        % Append computed results to the frame table.
        frame = [frame, ...
            table({Case_sigstats_4},'VariableNames',{'Case_sigstats_4'})];

        %% SignalFeatures
        try
            % Compute signal features.
            inputSignal = Case.P6;
            SINAD = sinad(inputSignal);
            ShapeFactor = rms(inputSignal,'omitnan')/mean(abs(inputSignal),'omitnan');

            % Concatenate signal features.
            featureValues = [SINAD,ShapeFactor];

            % Store computed features in a table.
            featureNames = {'SINAD','ShapeFactor'};
            Case_sigstats_5 = array2table(featureValues,'VariableNames',featureNames);
        catch
            % Store computed features in a table.
            featureValues = NaN(1,2);
            featureNames = {'SINAD','ShapeFactor'};
            Case_sigstats_5 = array2table(featureValues,'VariableNames',featureNames);
        end

        % Append computed results to the frame table.
        frame = [frame, ...
            table({Case_sigstats_5},'VariableNames',{'Case_sigstats_5'})];

        %% SignalFeatures
        try
            % Compute signal features.
            inputSignal = Case.P7;
            SINAD = sinad(inputSignal);
            ShapeFactor = rms(inputSignal,'omitnan')/mean(abs(inputSignal),'omitnan');
            Std = std(inputSignal,'omitnan');

            % Concatenate signal features.
            featureValues = [SINAD,ShapeFactor,Std];

            % Store computed features in a table.
            featureNames = {'SINAD','ShapeFactor','Std'};
            Case_sigstats_6 = array2table(featureValues,'VariableNames',featureNames);
        catch
            % Store computed features in a table.
            featureValues = NaN(1,3);
            featureNames = {'SINAD','ShapeFactor','Std'};
            Case_sigstats_6 = array2table(featureValues,'VariableNames',featureNames);
        end

        % Append computed results to the frame table.
        frame = [frame, ...
            table({Case_sigstats_6},'VariableNames',{'Case_sigstats_6'})];

        %% Concatenate frames.
        frames = [frames;frame]; %#ok<*AGROW>
    end
    % Append all member results to the cell array.
    memberResult = table({frames},'VariableNames',"FRM_1");
    allMembersResult = [allMembersResult; {memberResult}]; %#ok<AGROW>
end

% Write the results for all members to the ensemble.
writeToMembers(outputEnsemble,allMembersResult)

% Gather all features into a table.
selectedFeatureNames = ["FRM_1/Case_sigstats/SINAD","FRM_1/Case_sigstats_1/SINAD","FRM_1/Case_sigstats/SNR","FRM_1/Case_sigstats_3/SINAD","FRM_1/Case_sigstats_4/SINAD","FRM_1/Case_sigstats_5/SINAD","FRM_1/Case_sigstats/Skewness","FRM_1/Case_sigstats_4/SNR","FRM_1/Case_sigstats_2/SINAD","FRM_1/Case_sigstats_4/ShapeFactor","FRM_1/Case_sigstats_2/Skewness","FRM_1/Case_sigstats_1/ShapeFactor","FRM_1/Case_sigstats_6/Std","FRM_1/Case_sigstats_1/Std","FRM_1/Case_sigstats_4/Std","FRM_1/Case_sigstats_6/ShapeFactor","FRM_1/Case_sigstats_1/SNR","FRM_1/Case_sigstats_5/ShapeFactor","FRM_1/Case_sigstats/CrestFactor","FRM_1/Case_sigstats_6/SINAD"];
featureTable = readFeatureTable(outputEnsemble,"FRM_1",'Features',selectedFeatureNames,'ConditionVariables',outputEnsemble.ConditionVariables,'IncludeMemberID',true);

% Set SelectedVariables to select variables to read from the ensemble.
outputEnsemble.SelectedVariables = unique([outputEnsemble.DataVariables;outputEnsemble.ConditionVariables;outputEnsemble.IndependentVariables],'stable');

% Gather results into a table.
if nargout > 1
    outputTable = readall(outputEnsemble);
end
end